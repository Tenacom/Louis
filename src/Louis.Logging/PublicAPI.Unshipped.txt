#nullable enable
Louis.Logging.LoggerExtensions
Louis.Logging.LogInterpolatedStringHandler
Louis.Logging.LogInterpolatedStringHandler.AppendFormatted(object? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.AppendFormatted<T>(T? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.AppendLiteral(string! s) -> void
Louis.Logging.LogInterpolatedStringHandler.Critical
Louis.Logging.LogInterpolatedStringHandler.Critical.AppendFormatted(object? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Critical.AppendFormatted<T>(T? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Critical.AppendLiteral(string! s) -> void
Louis.Logging.LogInterpolatedStringHandler.Critical.Critical() -> void
Louis.Logging.LogInterpolatedStringHandler.Critical.Critical(int literalLength, int formattedCount, Microsoft.Extensions.Logging.ILogger! this, out bool isEnabled) -> void
Louis.Logging.LogInterpolatedStringHandler.Debug
Louis.Logging.LogInterpolatedStringHandler.Debug.AppendFormatted(object? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Debug.AppendFormatted<T>(T? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Debug.AppendLiteral(string! s) -> void
Louis.Logging.LogInterpolatedStringHandler.Debug.Debug() -> void
Louis.Logging.LogInterpolatedStringHandler.Debug.Debug(int literalLength, int formattedCount, Microsoft.Extensions.Logging.ILogger! this, out bool isEnabled) -> void
Louis.Logging.LogInterpolatedStringHandler.Error
Louis.Logging.LogInterpolatedStringHandler.Error.AppendFormatted(object? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Error.AppendFormatted<T>(T? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Error.AppendLiteral(string! s) -> void
Louis.Logging.LogInterpolatedStringHandler.Error.Error() -> void
Louis.Logging.LogInterpolatedStringHandler.Error.Error(int literalLength, int formattedCount, Microsoft.Extensions.Logging.ILogger! this, out bool isEnabled) -> void
Louis.Logging.LogInterpolatedStringHandler.Information
Louis.Logging.LogInterpolatedStringHandler.Information.AppendFormatted(object? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Information.AppendFormatted<T>(T? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Information.AppendLiteral(string! s) -> void
Louis.Logging.LogInterpolatedStringHandler.Information.Information() -> void
Louis.Logging.LogInterpolatedStringHandler.Information.Information(int literalLength, int formattedCount, Microsoft.Extensions.Logging.ILogger! this, out bool isEnabled) -> void
Louis.Logging.LogInterpolatedStringHandler.LogInterpolatedStringHandler() -> void
Louis.Logging.LogInterpolatedStringHandler.LogInterpolatedStringHandler(int literalLength, int formattedCount, Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, out bool isEnabled) -> void
Louis.Logging.LogInterpolatedStringHandler.Trace
Louis.Logging.LogInterpolatedStringHandler.Trace.AppendFormatted(object? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Trace.AppendFormatted<T>(T? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Trace.AppendLiteral(string! s) -> void
Louis.Logging.LogInterpolatedStringHandler.Trace.Trace() -> void
Louis.Logging.LogInterpolatedStringHandler.Trace.Trace(int literalLength, int formattedCount, Microsoft.Extensions.Logging.ILogger! this, out bool isEnabled) -> void
Louis.Logging.LogInterpolatedStringHandler.Warning
Louis.Logging.LogInterpolatedStringHandler.Warning.AppendFormatted(object? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Warning.AppendFormatted<T>(T? value, int alignment = 0, string? format = null, string! name = "") -> void
Louis.Logging.LogInterpolatedStringHandler.Warning.AppendLiteral(string! s) -> void
Louis.Logging.LogInterpolatedStringHandler.Warning.Warning() -> void
Louis.Logging.LogInterpolatedStringHandler.Warning.Warning(int literalLength, int formattedCount, Microsoft.Extensions.Logging.ILogger! this, out bool isEnabled) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, ref Louis.Logging.LogInterpolatedStringHandler message) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, string! message) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler message) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, ref Louis.Logging.LogInterpolatedStringHandler message) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, string! message) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler message) -> void
static Louis.Logging.LoggerExtensions.Log(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.LogLevel logLevel, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, ref Louis.Logging.LogInterpolatedStringHandler.Critical message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, string! message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Critical message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, ref Louis.Logging.LogInterpolatedStringHandler.Critical message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, string! message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Critical message) -> void
static Louis.Logging.LoggerExtensions.LogCritical(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, ref Louis.Logging.LogInterpolatedStringHandler.Debug message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, string! message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Debug message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, ref Louis.Logging.LogInterpolatedStringHandler.Debug message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, string! message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Debug message) -> void
static Louis.Logging.LoggerExtensions.LogDebug(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, ref Louis.Logging.LogInterpolatedStringHandler.Error message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, string! message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Error message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, ref Louis.Logging.LogInterpolatedStringHandler.Error message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, string! message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Error message) -> void
static Louis.Logging.LoggerExtensions.LogError(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, ref Louis.Logging.LogInterpolatedStringHandler.Information message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, string! message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Information message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, ref Louis.Logging.LogInterpolatedStringHandler.Information message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, string! message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Information message) -> void
static Louis.Logging.LoggerExtensions.LogInformation(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, ref Louis.Logging.LogInterpolatedStringHandler.Trace message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, string! message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Trace message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, ref Louis.Logging.LogInterpolatedStringHandler.Trace message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, string! message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Trace message) -> void
static Louis.Logging.LoggerExtensions.LogTrace(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, ref Louis.Logging.LogInterpolatedStringHandler.Warning message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, string! message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Warning message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception, string! message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, ref Louis.Logging.LogInterpolatedStringHandler.Warning message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, string! message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, ref Louis.Logging.LogInterpolatedStringHandler.Warning message) -> void
static Louis.Logging.LoggerExtensions.LogWarning(this Microsoft.Extensions.Logging.ILogger! this, System.Exception? exception, string! message) -> void
